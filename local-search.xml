<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>AddressSanitizer —— ASAN分析内存错误</title>
    <link href="/2020/10/10/C++/Tools/ASAN/"/>
    <url>/2020/10/10/C++/Tools/ASAN/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>AddressSanitizer</code> 是一个性能非常好的<code>C/C++</code> 内存错误探测工具。<br>它由编译器的插桩模块和替换了<code>malloc</code>函数的运行时库组成。<br>这个工具可以探测如下这些类型的错误：</p><ul><li>对堆、栈和全局内存的访问越界(堆缓冲区溢出，栈缓冲区溢出，和全局缓冲区溢出)</li><li>UAP(Use-after-free，悬挂指针的解引用，或者说野指针)</li><li>Use-after-return(无效的栈上内存，运行时标记 <code>ASAN_OPTIONS=detect_stack_use_after_return=1</code>)</li><li>Use-After-Scope (作用域外访问，<code>clang</code>标记<code>-fsanitize-address-use-after-scope</code>)</li><li>内存的重复释放 (double-free)</li><li>初始化顺序的BUG</li><li>内存泄漏 (memory leak)</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>以<code>CentOS7</code>环境下编译器<code>gcc 4.8.5</code>为例 (版本支持: <code>gcc version</code> &gt; 4.8)</p><ol><li>安装对应系统版本和<code>gcc</code>版本的<code>libasan</code> (搜索<code>libasan</code>相关包: <a href="https://pkgs.org/search/?q=libasan">pkgs.org</a>):<pre><code class="hljs apache"><span class="hljs-attribute">wget</span> http://mirror.centos.org/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/libasan-<span class="hljs-number">4</span>.<span class="hljs-number">8</span>.<span class="hljs-number">5</span>-<span class="hljs-number">39</span>.el<span class="hljs-number">7</span>.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.rpm<span class="hljs-attribute">yum</span> install -y libasan-<span class="hljs-number">4</span>.<span class="hljs-number">8</span>.<span class="hljs-number">5</span>-<span class="hljs-number">39</span>.el<span class="hljs-number">7</span>.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.rpm</code></pre></li><li>编译源码的时候只需要加上以下编译参数即可：<pre><code class="hljs ini"><span class="hljs-attr">-fsanitize</span>=address -f<span class="hljs-literal">no</span>-omit-frame-pointer -g</code></pre></li><li>若项目是以<code>CMake</code>作为构建工具, 可按如下做法修改:<pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">add_definitions</span><span class="hljs-params">(<span class="hljs-string">&quot;-fsanitize=address -fno-omit-frame-pointer -lasan&quot;</span>)</span></span><span class="hljs-function"><span class="hljs-title">set</span><span class="hljs-params">(CMAKE_CXX_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -fsanitize=address -fno-omit-frame-pointer -lasan&quot;</span>)</span></span><span class="hljs-function"><span class="hljs-title">set</span><span class="hljs-params">(CMAKE_C_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_C_FLAGS&#125; -fsanitize=address -fno-omit-frame-pointer -lasan&quot;</span>)</span></span><span class="hljs-function"><span class="hljs-title">set</span><span class="hljs-params">(CMAKE_EXE_LINKER_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_EXE_LINKER_FLAGS&#125; -fsanitize=address -fno-omit-frame-pointer -lasan&quot;</span>)</span></span><span class="hljs-function"><span class="hljs-title">set</span><span class="hljs-params">(CMAKE_MODULE_LINKER_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_MODULE_LINKER_FLAGS&#125; -fsanitize=address -fno-omit-frame-pointer -lasan&quot;</span>)</span></span></code></pre></li></ol><h2 id="测试例子"><a href="#测试例子" class="headerlink" title="测试例子"></a>测试例子</h2><p>源码:</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>** argv)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> a[<span class="hljs-number">5</span>];    <span class="hljs-keyword">int</span> index=<span class="hljs-number">6</span>;    <span class="hljs-keyword">int</span> retval=a[index];    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Ret :&quot;</span> &lt;&lt; retval &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">return</span> retval;&#125;</code></pre><p>编译：</p><pre><code class="hljs routeros">g++ -g <span class="hljs-attribute">-std</span>=c++11 <span class="hljs-attribute">-fsanitize</span>=address -fno-omit-frame-pointer test.cpp -o test</code></pre><p>运行<code>./test</code>后报错：</p><pre><code class="hljs yaml"><span class="hljs-string">=================================================================</span><span class="hljs-string">==7708==ERROR:</span> <span class="hljs-attr">AddressSanitizer:</span> <span class="hljs-string">stack-buffer-overflow</span> <span class="hljs-string">on</span> <span class="hljs-string">address</span> <span class="hljs-number">0x7ffc32facb68</span> <span class="hljs-string">at</span> <span class="hljs-string">pc</span> <span class="hljs-number">0x401610</span> <span class="hljs-string">bp</span> <span class="hljs-number">0x7ffc32facae0</span> <span class="hljs-string">sp</span> <span class="hljs-number">0x7ffc32facad0</span><span class="hljs-string">READ</span> <span class="hljs-string">of</span> <span class="hljs-string">size</span> <span class="hljs-number">4</span> <span class="hljs-string">at</span> <span class="hljs-number">0x7ffc32facb68</span> <span class="hljs-string">thread</span> <span class="hljs-string">T0</span>    <span class="hljs-comment">#0 0x40160f in main test.cpp:8</span>    <span class="hljs-comment">#1 0x7fefe78a8504 in __libc_start_main (/lib64/libc.so.6+0x22504)</span>    <span class="hljs-comment">#2 0x401448 (./test+0x401448)</span><span class="hljs-string">Address</span> <span class="hljs-number">0x7ffc32facb68</span> <span class="hljs-string">is</span> <span class="hljs-string">located</span> <span class="hljs-string">in</span> <span class="hljs-string">stack</span> <span class="hljs-string">of</span> <span class="hljs-string">thread</span> <span class="hljs-string">T0</span> <span class="hljs-string">at</span> <span class="hljs-string">offset</span> <span class="hljs-number">56</span> <span class="hljs-string">in</span> <span class="hljs-string">frame</span>    <span class="hljs-comment">#0 0x401525 in main ./test.cpp:5</span>  <span class="hljs-string">This</span> <span class="hljs-string">frame</span> <span class="hljs-string">has</span> <span class="hljs-number">2</span> <span class="hljs-string">object(s):</span>    [<span class="hljs-number">32</span>, <span class="hljs-number">52</span><span class="hljs-string">)</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-string">&lt;==</span> <span class="hljs-string">Memory</span> <span class="hljs-string">access</span> <span class="hljs-string">at</span> <span class="hljs-string">offset</span> <span class="hljs-number">56</span> <span class="hljs-string">overflows</span> <span class="hljs-string">this</span> <span class="hljs-string">variable</span>    [<span class="hljs-number">96</span>, <span class="hljs-number">144</span><span class="hljs-string">)</span> <span class="hljs-string">&#x27;m&#x27;</span><span class="hljs-attr">HINT:</span> <span class="hljs-string">this</span> <span class="hljs-string">may</span> <span class="hljs-string">be</span> <span class="hljs-string">a</span> <span class="hljs-literal">false</span> <span class="hljs-string">positive</span> <span class="hljs-string">if</span> <span class="hljs-string">your</span> <span class="hljs-string">program</span> <span class="hljs-string">uses</span> <span class="hljs-string">some</span> <span class="hljs-string">custom</span> <span class="hljs-string">stack</span> <span class="hljs-string">unwind</span> <span class="hljs-string">mechanism</span> <span class="hljs-string">or</span> <span class="hljs-string">swapcontext</span>      <span class="hljs-string">(longjmp</span> <span class="hljs-string">and</span> <span class="hljs-string">C++</span> <span class="hljs-string">exceptions</span> <span class="hljs-string">*are*</span> <span class="hljs-string">supported)</span><span class="hljs-attr">SUMMARY: AddressSanitizer:</span> <span class="hljs-string">stack-buffer-overflow</span> <span class="hljs-string">./test.cpp:8</span> <span class="hljs-string">main</span><span class="hljs-attr">Shadow bytes around the buggy address:</span>  <span class="hljs-attr">0x1000065ed910:</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-attr">0x1000065ed920:</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-attr">0x1000065ed930:</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-attr">0x1000065ed940:</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-attr">0x1000065ed950:</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><span class="hljs-string">=&gt;0x1000065ed960:</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-string">f1</span> <span class="hljs-string">f1</span> <span class="hljs-string">f1</span> <span class="hljs-string">f1</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">04</span>[<span class="hljs-string">f4</span>]<span class="hljs-string">f2</span> <span class="hljs-string">f2</span>  <span class="hljs-attr">0x1000065ed970:</span> <span class="hljs-string">f2</span> <span class="hljs-string">f2</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-string">f4</span> <span class="hljs-string">f4</span> <span class="hljs-string">f3</span> <span class="hljs-string">f3</span> <span class="hljs-string">f3</span> <span class="hljs-string">f3</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-attr">0x1000065ed980:</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-attr">0x1000065ed990:</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-attr">0x1000065ed9a0:</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-attr">0x1000065ed9b0:</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><span class="hljs-string">Shadow</span> <span class="hljs-string">byte</span> <span class="hljs-string">legend</span> <span class="hljs-string">(one</span> <span class="hljs-string">shadow</span> <span class="hljs-string">byte</span> <span class="hljs-string">represents</span> <span class="hljs-number">8</span> <span class="hljs-string">application</span> <span class="hljs-string">bytes):</span>  <span class="hljs-attr">Addressable:</span>           <span class="hljs-number">00</span>  <span class="hljs-attr">Partially addressable:</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span>  <span class="hljs-attr">Heap left redzone:</span>       <span class="hljs-string">fa</span>  <span class="hljs-attr">Heap right redzone:</span>      <span class="hljs-string">fb</span>  <span class="hljs-attr">Freed heap region:</span>       <span class="hljs-string">fd</span>  <span class="hljs-attr">Stack left redzone:</span>      <span class="hljs-string">f1</span>  <span class="hljs-attr">Stack mid redzone:</span>       <span class="hljs-string">f2</span>  <span class="hljs-attr">Stack right redzone:</span>     <span class="hljs-string">f3</span>  <span class="hljs-attr">Stack partial redzone:</span>   <span class="hljs-string">f4</span>  <span class="hljs-attr">Stack after return:</span>      <span class="hljs-string">f5</span>  <span class="hljs-attr">Stack use after scope:</span>   <span class="hljs-string">f8</span>  <span class="hljs-attr">Global redzone:</span>          <span class="hljs-string">f9</span>  <span class="hljs-attr">Global init order:</span>       <span class="hljs-string">f6</span>  <span class="hljs-attr">Poisoned by user:</span>        <span class="hljs-string">f7</span>  <span class="hljs-string">Contiguous</span> <span class="hljs-string">container</span> <span class="hljs-string">OOB:fc</span>  <span class="hljs-attr">ASan internal:</span>           <span class="hljs-string">fe</span><span class="hljs-string">==7708==ABORTING</span></code></pre><p>可以看到报错提示<strong>栈缓冲区溢出</strong> <code>ERROR: AddressSanitizer: stack-buffer-overflow</code>, 通过调查源码可以发现程序对栈区内存上的数组<code>a</code>的访问越界了。</p><h2 id="实践经验"><a href="#实践经验" class="headerlink" title="实践经验"></a>实践经验</h2><ul><li>项目的构建方案应当有编译选项可以随时启用/关闭<code>ASAN</code></li><li>项目送测阶段可以打开<code>ASAN</code>以帮助暴露更多的低概率诡异问题</li><li>请勿在生产版本中启用<code>ASAN</code>, 其会降低程序运行速度大概2-5倍 (特殊情况除外)</li><li>实际开发测试过程中通过<code>ASAN</code>扫出的常见问题有:<ul><li>多线程下临界资源未加保护导致同时出现读写访问, 解决方案一般是对该资源恰当地加锁即可</li><li>内存越界, 如申请了N字节的内存却向其内存地址拷贝大于N字节的数据, 这种情况在没有开启ASAN的情况下一般都很难发现</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>ASAN</tag>
      
      <tag>内存越界</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
