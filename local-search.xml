<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GDB —— 优化STL容器变量的显示</title>
    <link href="/2020/10/11/C++/Tools/GDB-Pretty-View/"/>
    <url>/2020/10/11/C++/Tools/GDB-Pretty-View/</url>
    
    <content type="html"><![CDATA[<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><code>wget http://www.yolinux.com/TUTORIALS/src/dbinit_stl_views-1.03.txt</code></li><li><code>cp dbinit_stl_views-1.03.txt ~/.gdbinit</code></li><li>启动gdb的时候, gdb会先去加载<code>~/.gdbinit</code>, 以下为在gdb里面打印各种STL容器的对应方式:</li></ol><table><thead><tr><th>Data type</th><th>GDB command</th></tr></thead><tbody><tr><td>std::vector<T></td><td>pvector stl_variable</td></tr><tr><td>std::list<T></td><td>plist stl_variable</td></tr><tr><td>std::map&lt;T,T&gt;</td><td>pmap stl_variable</td></tr><tr><td>std::multimap&lt;T,T&gt;</td><td>pmap stl_variable</td></tr><tr><td>std::set<T></td><td>pset stl_variable</td></tr><tr><td>std::multiset<T></td><td>pset stl_variable</td></tr><tr><td>std::deque<T></td><td>pdequeue stl_variable</td></tr><tr><td>std::stack<T></td><td>pstack stl_variable</td></tr><tr><td>std::queue<T></td><td>pqueue stl_variable</td></tr><tr><td>std::priority_queue<T></td><td>ppqueue stl_variable</td></tr><tr><td>std::bitset<n>td&gt;</td><td>pbitset stl_variable</td></tr><tr><td>std::string</td><td>pstring stl_variable</td></tr><tr><td>std::widestring</td><td>pwstring stl_variable</td></tr></tbody></table><h2 id="自用版本"><a href="#自用版本" class="headerlink" title="自用版本"></a>自用版本</h2><p>以下为自用版本的<code>~/.gdbinit</code>内容, 可以拿来即用:</p><pre><code class="hljs routeros"><span class="hljs-comment">#</span><span class="hljs-comment">#   STL GDB evaluators/views/utilities - 1.03</span><span class="hljs-comment">#</span><span class="hljs-comment">#   The new GDB commands:</span><span class="hljs-comment">#           are entirely non instrumental</span><span class="hljs-comment">#           do not depend on any &quot;inline&quot;(s) - e.g. size(), [], etc</span><span class="hljs-comment">#       are extremely tolerant to debugger settings</span><span class="hljs-comment">#</span><span class="hljs-comment">#   This file should be &quot;included&quot; in .gdbinit as following:</span><span class="hljs-comment">#   source stl-views.gdb or just paste it into your .gdbinit file</span><span class="hljs-comment">#</span><span class="hljs-comment">#   The following STL containers are currently supported:</span><span class="hljs-comment">#</span><span class="hljs-comment">#       std::vector&lt;T&gt; -- via pvector command</span><span class="hljs-comment">#       std::list&lt;T&gt; -- via plist or plist_member command</span><span class="hljs-comment">#       std::map&lt;T,T&gt; -- via pmap or pmap_member command</span><span class="hljs-comment">#       std::multimap&lt;T,T&gt; -- via pmap or pmap_member command</span><span class="hljs-comment">#       std::set&lt;T&gt; -- via pset command</span><span class="hljs-comment">#       std::multiset&lt;T&gt; -- via pset command</span><span class="hljs-comment">#       std::deque&lt;T&gt; -- via pdequeue command</span><span class="hljs-comment">#       std::stack&lt;T&gt; -- via pstack command</span><span class="hljs-comment">#       std::queue&lt;T&gt; -- via pqueue command</span><span class="hljs-comment">#       std::priority_queue&lt;T&gt; -- via ppqueue command</span><span class="hljs-comment">#       std::bitset&lt;n&gt; -- via pbitset command</span><span class="hljs-comment">#       std::string -- via pstring command</span><span class="hljs-comment">#       std::widestring -- via pwstring command</span><span class="hljs-comment">#</span><span class="hljs-comment">#   The end of this file contains (optional) C++ beautifiers</span><span class="hljs-comment">#   Make sure your debugger supports $argc</span><span class="hljs-comment">#</span><span class="hljs-comment">#   Simple GDB Macros writen by Dan Marinescu (H-PhD) - License GPL</span><span class="hljs-comment">#   Inspired by intial work of Tom Malnar,</span><span class="hljs-comment">#     Tony Novac (PhD) / Cornell / Stanford,</span><span class="hljs-comment">#     Gilad Mishne (PhD) and Many Many Others.</span><span class="hljs-comment">#   Contact: dan_c_marinescu@yahoo.com (Subject: STL)</span><span class="hljs-comment">#</span><span class="hljs-comment">#   Modified to work with g++ 4.3 by Anders Elton</span><span class="hljs-comment">#   Also added _member functions, that instead of printing the entire class in map, prints a member.</span><span class="hljs-comment">#</span><span class="hljs-comment"># std::vector&lt;&gt;</span><span class="hljs-comment">#</span>define pvector        <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 0                help pvector        <span class="hljs-keyword">else</span>                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$size</span> = <span class="hljs-variable">$arg0</span>._M_impl._M_finish - <span class="hljs-variable">$arg0</span>._M_impl._M_start                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$capacity</span> = <span class="hljs-variable">$arg0</span>._M_impl._M_end_of_storage - <span class="hljs-variable">$arg0</span>._M_impl._M_start                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$size_max</span> = <span class="hljs-variable">$size</span> - 1        end        <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 1                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$i</span> = 0                <span class="hljs-keyword">while</span> <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$size</span>                        printf <span class="hljs-string">&quot;elem[%u]: &quot;</span>, <span class="hljs-variable">$i</span>                        p *(<span class="hljs-variable">$arg0</span>._M_impl._M_start + <span class="hljs-variable">$i</span>)                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$i</span>++                end        end        <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 2                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$idx</span> = <span class="hljs-variable">$arg1</span>                <span class="hljs-keyword">if</span> <span class="hljs-variable">$idx</span> &lt; 0 || <span class="hljs-variable">$idx</span> &gt; <span class="hljs-variable">$size_max</span>                        printf <span class="hljs-string">&quot;idx1, idx2 are not in acceptable range: [0..%u].\n&quot;</span>, <span class="hljs-variable">$size_max</span>                <span class="hljs-keyword">else</span>                        printf <span class="hljs-string">&quot;elem[%u]: &quot;</span>, <span class="hljs-variable">$idx</span>                        p *(<span class="hljs-variable">$arg0</span>._M_impl._M_start + <span class="hljs-variable">$idx</span>)                end        end        <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 3          <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$start_idx</span> = <span class="hljs-variable">$arg1</span>          <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$stop_idx</span> = <span class="hljs-variable">$arg2</span>          <span class="hljs-keyword">if</span> <span class="hljs-variable">$start_idx</span> &gt; <span class="hljs-variable">$stop_idx</span>            <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$tmp_idx</span> = <span class="hljs-variable">$start_idx</span>            <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$start_idx</span> = <span class="hljs-variable">$stop_idx</span>            <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$stop_idx</span> = <span class="hljs-variable">$tmp_idx</span>          end          <span class="hljs-keyword">if</span> <span class="hljs-variable">$start_idx</span> &lt; 0 || <span class="hljs-variable">$stop_idx</span> &lt; 0 || <span class="hljs-variable">$start_idx</span> &gt; <span class="hljs-variable">$size_max</span> || <span class="hljs-variable">$stop_idx</span> &gt; <span class="hljs-variable">$size_max</span>            printf <span class="hljs-string">&quot;idx1, idx2 are not in acceptable range: [0..%u].\n&quot;</span>, <span class="hljs-variable">$size_max</span>          <span class="hljs-keyword">else</span>            <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$i</span> = <span class="hljs-variable">$start_idx</span>                <span class="hljs-keyword">while</span> <span class="hljs-variable">$i</span> &lt;= <span class="hljs-variable">$stop_idx</span>                        printf <span class="hljs-string">&quot;elem[%u]: &quot;</span>, <span class="hljs-variable">$i</span>                        p *(<span class="hljs-variable">$arg0</span>._M_impl._M_start + <span class="hljs-variable">$i</span>)                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$i</span>++                end          end        end        <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> &gt; 0                printf <span class="hljs-string">&quot;Vector size = %u\n&quot;</span>, <span class="hljs-variable">$size</span>                printf <span class="hljs-string">&quot;Vector capacity = %u\n&quot;</span>, <span class="hljs-variable">$capacity</span>                printf <span class="hljs-string">&quot;Element &quot;</span>                whatis <span class="hljs-variable">$arg0</span>._M_impl._M_start        endenddocument pvector        Prints std::vector&lt;T&gt; information.        Syntax: pvector &lt;vector&gt; &lt;idx1&gt; &lt;idx2&gt;        Note: idx, idx1 <span class="hljs-keyword">and</span> idx2 must be <span class="hljs-keyword">in</span> acceptable range [0<span class="hljs-built_in">..</span>&lt;vector&gt;.size()-1].        Examples:        pvector v - Prints vector content, size, capacity <span class="hljs-keyword">and</span> T typedef        pvector v 0 - Prints element[idx] <span class="hljs-keyword">from</span> vector        pvector v 1 2 - Prints elements <span class="hljs-keyword">in</span> range [idx1<span class="hljs-built_in">..</span>idx2] <span class="hljs-keyword">from</span> vectorend<span class="hljs-comment">#</span><span class="hljs-comment"># std::list&lt;&gt;</span><span class="hljs-comment">#</span>define plist        <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 0                help plist        <span class="hljs-keyword">else</span>                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$head</span> = &amp;<span class="hljs-variable">$arg0</span>._M_impl._M_node                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$current</span> = <span class="hljs-variable">$arg0</span>._M_impl._M_node._M_next                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$size</span> = 0                <span class="hljs-keyword">while</span> <span class="hljs-variable">$current</span> != <span class="hljs-variable">$head</span>                        <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 2                                printf <span class="hljs-string">&quot;elem[%u]: &quot;</span>, <span class="hljs-variable">$size</span>                                p *(<span class="hljs-variable">$arg1</span>*)(<span class="hljs-variable">$current</span> + 1)                        end                        <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 3                                <span class="hljs-keyword">if</span> <span class="hljs-variable">$size</span> == <span class="hljs-variable">$arg2</span>                                        printf <span class="hljs-string">&quot;elem[%u]: &quot;</span>, <span class="hljs-variable">$size</span>                                        p *(<span class="hljs-variable">$arg1</span>*)(<span class="hljs-variable">$current</span> + 1)                                end                        end                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$current</span> = <span class="hljs-variable">$current</span>._M_next                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$size</span>++                end                printf <span class="hljs-string">&quot;List size = %u \n&quot;</span>, <span class="hljs-variable">$size</span>                <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 1                        printf <span class="hljs-string">&quot;List &quot;</span>                        whatis <span class="hljs-variable">$arg0</span>                        printf <span class="hljs-string">&quot;Use plist &lt;variable_name&gt; &lt;element_type&gt; to see the elements in the list.\n&quot;</span>                end        endenddocument plist        Prints std::list&lt;T&gt; information.        Syntax: plist &lt;list&gt; &lt;T&gt; &lt;idx&gt;: Prints list size, <span class="hljs-keyword">if</span> T defined all elements <span class="hljs-keyword">or</span> just element at idx        Examples:        plist l - prints list size <span class="hljs-keyword">and</span> definition        plist l int - prints all elements <span class="hljs-keyword">and</span> list size        plist l int 2 - prints the third element <span class="hljs-keyword">in</span> the list (<span class="hljs-keyword">if</span> exists) <span class="hljs-keyword">and</span> list sizeenddefine plist_member        <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 0                help plist_member        <span class="hljs-keyword">else</span>                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$head</span> = &amp;<span class="hljs-variable">$arg0</span>._M_impl._M_node                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$current</span> = <span class="hljs-variable">$arg0</span>._M_impl._M_node._M_next                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$size</span> = 0                <span class="hljs-keyword">while</span> <span class="hljs-variable">$current</span> != <span class="hljs-variable">$head</span>                        <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 3                                printf <span class="hljs-string">&quot;elem[%u]: &quot;</span>, <span class="hljs-variable">$size</span>                                p (*(<span class="hljs-variable">$arg1</span>*)(<span class="hljs-variable">$current</span> + 1)).<span class="hljs-variable">$arg2</span>                        end                        <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 4                                <span class="hljs-keyword">if</span> <span class="hljs-variable">$size</span> == <span class="hljs-variable">$arg3</span>                                        printf <span class="hljs-string">&quot;elem[%u]: &quot;</span>, <span class="hljs-variable">$size</span>                                        p (*(<span class="hljs-variable">$arg1</span>*)(<span class="hljs-variable">$current</span> + 1)).<span class="hljs-variable">$arg2</span>                                end                        end                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$current</span> = <span class="hljs-variable">$current</span>._M_next                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$size</span>++                end                printf <span class="hljs-string">&quot;List size = %u \n&quot;</span>, <span class="hljs-variable">$size</span>                <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 1                        printf <span class="hljs-string">&quot;List &quot;</span>                        whatis <span class="hljs-variable">$arg0</span>                        printf <span class="hljs-string">&quot;Use plist_member &lt;variable_name&gt; &lt;element_type&gt; &lt;member&gt; to see the elements in the list.\n&quot;</span>                end        endenddocument plist_member        Prints std::list&lt;T&gt; information.        Syntax: plist &lt;list&gt; &lt;T&gt; &lt;idx&gt;: Prints list size, <span class="hljs-keyword">if</span> T defined all elements <span class="hljs-keyword">or</span> just element at idx        Examples:        plist_member l int member - prints all elements <span class="hljs-keyword">and</span> list size        plist_member l int member 2 - prints the third element <span class="hljs-keyword">in</span> the list (<span class="hljs-keyword">if</span> exists) <span class="hljs-keyword">and</span> list sizeend<span class="hljs-comment">#</span><span class="hljs-comment"># std::map and std::multimap</span><span class="hljs-comment">#</span>define pmap        <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 0                help pmap        <span class="hljs-keyword">else</span>                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$tree</span> = <span class="hljs-variable">$arg0</span>                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$i</span> = 0                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$tree</span>._M_t._M_impl._M_header._M_left                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$end</span> = <span class="hljs-variable">$tree</span>._M_t._M_impl._M_header                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$tree_size</span> = <span class="hljs-variable">$tree</span>._M_t._M_impl._M_node_count                <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 1                        printf <span class="hljs-string">&quot;Map &quot;</span>                        whatis <span class="hljs-variable">$tree</span>                        printf <span class="hljs-string">&quot;Use pmap &lt;variable_name&gt; &lt;left_element_type&gt; &lt;right_element_type&gt; to see the elements in the map.\n&quot;</span>                end                <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 3                        <span class="hljs-keyword">while</span> <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$tree_size</span>                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$value</span> = (void *)(<span class="hljs-variable">$node</span> + 1)                                printf <span class="hljs-string">&quot;elem[%u].left: &quot;</span>, <span class="hljs-variable">$i</span>                                p *(<span class="hljs-variable">$arg1</span>*)<span class="hljs-variable">$value</span>                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$value</span> = <span class="hljs-variable">$value</span> + sizeof(<span class="hljs-variable">$arg1</span>)                                printf <span class="hljs-string">&quot;elem[%u].right: &quot;</span>, <span class="hljs-variable">$i</span>                                p *(<span class="hljs-variable">$arg2</span>*)<span class="hljs-variable">$value</span>                                <span class="hljs-keyword">if</span> <span class="hljs-variable">$node</span>._M_right != 0                                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$node</span>._M_right                                        <span class="hljs-keyword">while</span> <span class="hljs-variable">$node</span>._M_left != 0                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$node</span>._M_left                                        end                                <span class="hljs-keyword">else</span>                                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$tmp_node</span> = <span class="hljs-variable">$node</span>._M_parent                                        <span class="hljs-keyword">while</span> <span class="hljs-variable">$node</span> == <span class="hljs-variable">$tmp_node</span>._M_right                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$tmp_node</span>                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$tmp_node</span> = <span class="hljs-variable">$tmp_node</span>._M_parent                                        end                                        <span class="hljs-keyword">if</span> <span class="hljs-variable">$node</span>._M_right != <span class="hljs-variable">$tmp_node</span>                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$tmp_node</span>                                        end                                end                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$i</span>++                        end                end                <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 4                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$idx</span> = <span class="hljs-variable">$arg3</span>                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$ElementsFound</span> = 0                        <span class="hljs-keyword">while</span> <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$tree_size</span>                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$value</span> = (void *)(<span class="hljs-variable">$node</span> + 1)                                <span class="hljs-keyword">if</span> *(<span class="hljs-variable">$arg1</span>*)<span class="hljs-variable">$value</span> == <span class="hljs-variable">$idx</span>                                        printf <span class="hljs-string">&quot;elem[%u].left: &quot;</span>, <span class="hljs-variable">$i</span>                                        p *(<span class="hljs-variable">$arg1</span>*)<span class="hljs-variable">$value</span>                                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$value</span> = <span class="hljs-variable">$value</span> + sizeof(<span class="hljs-variable">$arg1</span>)                                        printf <span class="hljs-string">&quot;elem[%u].right: &quot;</span>, <span class="hljs-variable">$i</span>                                        p *(<span class="hljs-variable">$arg2</span>*)<span class="hljs-variable">$value</span>                                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$ElementsFound</span>++                                end                                <span class="hljs-keyword">if</span> <span class="hljs-variable">$node</span>._M_right != 0                                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$node</span>._M_right                                        <span class="hljs-keyword">while</span> <span class="hljs-variable">$node</span>._M_left != 0                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$node</span>._M_left                                        end                                <span class="hljs-keyword">else</span>                                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$tmp_node</span> = <span class="hljs-variable">$node</span>._M_parent                                        <span class="hljs-keyword">while</span> <span class="hljs-variable">$node</span> == <span class="hljs-variable">$tmp_node</span>._M_right                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$tmp_node</span>                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$tmp_node</span> = <span class="hljs-variable">$tmp_node</span>._M_parent                                        end                                        <span class="hljs-keyword">if</span> <span class="hljs-variable">$node</span>._M_right != <span class="hljs-variable">$tmp_node</span>                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$tmp_node</span>                                        end                                end                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$i</span>++                        end                        printf <span class="hljs-string">&quot;Number of elements found = %u\n&quot;</span>, <span class="hljs-variable">$ElementsFound</span>                end                <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 5                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$idx1</span> = <span class="hljs-variable">$arg3</span>                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$idx2</span> = <span class="hljs-variable">$arg4</span>                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$ElementsFound</span> = 0                        <span class="hljs-keyword">while</span> <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$tree_size</span>                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$value</span> = (void *)(<span class="hljs-variable">$node</span> + 1)                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$valueLeft</span> = *(<span class="hljs-variable">$arg1</span>*)<span class="hljs-variable">$value</span>                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$valueRight</span> = *(<span class="hljs-variable">$arg2</span>*)(<span class="hljs-variable">$value</span> + sizeof(<span class="hljs-variable">$arg1</span>))                                <span class="hljs-keyword">if</span> <span class="hljs-variable">$valueLeft</span> == <span class="hljs-variable">$idx1</span> &amp;&amp; <span class="hljs-variable">$valueRight</span> == <span class="hljs-variable">$idx2</span>                                        printf <span class="hljs-string">&quot;elem[%u].left: &quot;</span>, <span class="hljs-variable">$i</span>                                        p <span class="hljs-variable">$valueLeft</span>                                        printf <span class="hljs-string">&quot;elem[%u].right: &quot;</span>, <span class="hljs-variable">$i</span>                                        p <span class="hljs-variable">$valueRight</span>                                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$ElementsFound</span>++                                end                                <span class="hljs-keyword">if</span> <span class="hljs-variable">$node</span>._M_right != 0                                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$node</span>._M_right                                        <span class="hljs-keyword">while</span> <span class="hljs-variable">$node</span>._M_left != 0                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$node</span>._M_left                                        end                                <span class="hljs-keyword">else</span>                                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$tmp_node</span> = <span class="hljs-variable">$node</span>._M_parent                                        <span class="hljs-keyword">while</span> <span class="hljs-variable">$node</span> == <span class="hljs-variable">$tmp_node</span>._M_right                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$tmp_node</span>                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$tmp_node</span> = <span class="hljs-variable">$tmp_node</span>._M_parent                                        end                                        <span class="hljs-keyword">if</span> <span class="hljs-variable">$node</span>._M_right != <span class="hljs-variable">$tmp_node</span>                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$tmp_node</span>                                        end                                end                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$i</span>++                        end                        printf <span class="hljs-string">&quot;Number of elements found = %u\n&quot;</span>, <span class="hljs-variable">$ElementsFound</span>                end                printf <span class="hljs-string">&quot;Map size = %u\n&quot;</span>, <span class="hljs-variable">$tree_size</span>        endenddocument pmap        Prints std::map&lt;TLeft <span class="hljs-keyword">and</span> TRight&gt; <span class="hljs-keyword">or</span> std::multimap&lt;TLeft <span class="hljs-keyword">and</span> TRight&gt; information. Works <span class="hljs-keyword">for</span> std::multimap as well.        Syntax: pmap &lt;map&gt; &lt;TtypeLeft&gt; &lt;TypeRight&gt; &lt;valLeft&gt; &lt;valRight&gt;: Prints map size, <span class="hljs-keyword">if</span> T defined all elements <span class="hljs-keyword">or</span> just element(s) with val(s)        Examples:        pmap m - prints map size <span class="hljs-keyword">and</span> definition        pmap m int int - prints all elements <span class="hljs-keyword">and</span> map size        pmap m int int 20 - prints the element(s) with left-value = 20 (<span class="hljs-keyword">if</span> any) <span class="hljs-keyword">and</span> map size        pmap m int int 20 200 - prints the element(s) with left-value = 20 <span class="hljs-keyword">and</span> right-value = 200 (<span class="hljs-keyword">if</span> any) <span class="hljs-keyword">and</span> map sizeenddefine pmap_member        <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 0                help pmap_member        <span class="hljs-keyword">else</span>                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$tree</span> = <span class="hljs-variable">$arg0</span>                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$i</span> = 0                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$tree</span>._M_t._M_impl._M_header._M_left                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$end</span> = <span class="hljs-variable">$tree</span>._M_t._M_impl._M_header                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$tree_size</span> = <span class="hljs-variable">$tree</span>._M_t._M_impl._M_node_count                <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 1                        printf <span class="hljs-string">&quot;Map &quot;</span>                        whatis <span class="hljs-variable">$tree</span>                        printf <span class="hljs-string">&quot;Use pmap &lt;variable_name&gt; &lt;left_element_type&gt; &lt;right_element_type&gt; to see the elements in the map.\n&quot;</span>                end                <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 5                        <span class="hljs-keyword">while</span> <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$tree_size</span>                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$value</span> = (void *)(<span class="hljs-variable">$node</span> + 1)                                printf <span class="hljs-string">&quot;elem[%u].left: &quot;</span>, <span class="hljs-variable">$i</span>                                p (*(<span class="hljs-variable">$arg1</span>*)<span class="hljs-variable">$value</span>).<span class="hljs-variable">$arg2</span>                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$value</span> = <span class="hljs-variable">$value</span> + sizeof(<span class="hljs-variable">$arg1</span>)                                printf <span class="hljs-string">&quot;elem[%u].right: &quot;</span>, <span class="hljs-variable">$i</span>                                p (*(<span class="hljs-variable">$arg3</span>*)<span class="hljs-variable">$value</span>).<span class="hljs-variable">$arg4</span>                                <span class="hljs-keyword">if</span> <span class="hljs-variable">$node</span>._M_right != 0                                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$node</span>._M_right                                        <span class="hljs-keyword">while</span> <span class="hljs-variable">$node</span>._M_left != 0                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$node</span>._M_left                                        end                                <span class="hljs-keyword">else</span>                                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$tmp_node</span> = <span class="hljs-variable">$node</span>._M_parent                                        <span class="hljs-keyword">while</span> <span class="hljs-variable">$node</span> == <span class="hljs-variable">$tmp_node</span>._M_right                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$tmp_node</span>                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$tmp_node</span> = <span class="hljs-variable">$tmp_node</span>._M_parent                                        end                                        <span class="hljs-keyword">if</span> <span class="hljs-variable">$node</span>._M_right != <span class="hljs-variable">$tmp_node</span>                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$tmp_node</span>                                        end                                end                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$i</span>++                        end                end                <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 6                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$idx</span> = <span class="hljs-variable">$arg5</span>                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$ElementsFound</span> = 0                        <span class="hljs-keyword">while</span> <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$tree_size</span>                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$value</span> = (void *)(<span class="hljs-variable">$node</span> + 1)                                <span class="hljs-keyword">if</span> *(<span class="hljs-variable">$arg1</span>*)<span class="hljs-variable">$value</span> == <span class="hljs-variable">$idx</span>                                        printf <span class="hljs-string">&quot;elem[%u].left: &quot;</span>, <span class="hljs-variable">$i</span>                                        p (*(<span class="hljs-variable">$arg1</span>*)<span class="hljs-variable">$value</span>).<span class="hljs-variable">$arg2</span>                                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$value</span> = <span class="hljs-variable">$value</span> + sizeof(<span class="hljs-variable">$arg1</span>)                                        printf <span class="hljs-string">&quot;elem[%u].right: &quot;</span>, <span class="hljs-variable">$i</span>                                        p (*(<span class="hljs-variable">$arg3</span>*)<span class="hljs-variable">$value</span>).<span class="hljs-variable">$arg4</span>                                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$ElementsFound</span>++                                end                                <span class="hljs-keyword">if</span> <span class="hljs-variable">$node</span>._M_right != 0                                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$node</span>._M_right                                        <span class="hljs-keyword">while</span> <span class="hljs-variable">$node</span>._M_left != 0                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$node</span>._M_left                                        end                                <span class="hljs-keyword">else</span>                                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$tmp_node</span> = <span class="hljs-variable">$node</span>._M_parent                                        <span class="hljs-keyword">while</span> <span class="hljs-variable">$node</span> == <span class="hljs-variable">$tmp_node</span>._M_right                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$tmp_node</span>                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$tmp_node</span> = <span class="hljs-variable">$tmp_node</span>._M_parent                                        end                                        <span class="hljs-keyword">if</span> <span class="hljs-variable">$node</span>._M_right != <span class="hljs-variable">$tmp_node</span>                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$tmp_node</span>                                        end                                end                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$i</span>++                        end                        printf <span class="hljs-string">&quot;Number of elements found = %u\n&quot;</span>, <span class="hljs-variable">$ElementsFound</span>                end                printf <span class="hljs-string">&quot;Map size = %u\n&quot;</span>, <span class="hljs-variable">$tree_size</span>        endenddocument pmap_member        Prints std::map&lt;TLeft <span class="hljs-keyword">and</span> TRight&gt; <span class="hljs-keyword">or</span> std::multimap&lt;TLeft <span class="hljs-keyword">and</span> TRight&gt; information. Works <span class="hljs-keyword">for</span> std::multimap as well.        Syntax: pmap &lt;map&gt; &lt;TtypeLeft&gt; &lt;TypeRight&gt; &lt;valLeft&gt; &lt;valRight&gt;: Prints map size, <span class="hljs-keyword">if</span> T defined all elements <span class="hljs-keyword">or</span> just element(s) with val(s)        Examples:        pmap_member m class1 member1 class2 member2 - prints class1.member1 : class2.member2        pmap_member m class1 member1 class2 member2 lvalue - prints class1.member1 : class2.member2 where class1 == lvalueend<span class="hljs-comment">#</span><span class="hljs-comment"># std::set and std::multiset</span><span class="hljs-comment">#</span>define pset        <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 0                help pset        <span class="hljs-keyword">else</span>                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$tree</span> = <span class="hljs-variable">$arg0</span>                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$i</span> = 0                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$tree</span>._M_t._M_impl._M_header._M_left                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$end</span> = <span class="hljs-variable">$tree</span>._M_t._M_impl._M_header                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$tree_size</span> = <span class="hljs-variable">$tree</span>._M_t._M_impl._M_node_count                <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 1                        printf <span class="hljs-string">&quot;Set &quot;</span>                        whatis <span class="hljs-variable">$tree</span>                        printf <span class="hljs-string">&quot;Use pset &lt;variable_name&gt; &lt;element_type&gt; to see the elements in the set.\n&quot;</span>                end                <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 2                        <span class="hljs-keyword">while</span> <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$tree_size</span>                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$value</span> = (void *)(<span class="hljs-variable">$node</span> + 1)                                printf <span class="hljs-string">&quot;elem[%u]: &quot;</span>, <span class="hljs-variable">$i</span>                                p *(<span class="hljs-variable">$arg1</span>*)<span class="hljs-variable">$value</span>                                <span class="hljs-keyword">if</span> <span class="hljs-variable">$node</span>._M_right != 0                                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$node</span>._M_right                                        <span class="hljs-keyword">while</span> <span class="hljs-variable">$node</span>._M_left != 0                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$node</span>._M_left                                        end                                <span class="hljs-keyword">else</span>                                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$tmp_node</span> = <span class="hljs-variable">$node</span>._M_parent                                        <span class="hljs-keyword">while</span> <span class="hljs-variable">$node</span> == <span class="hljs-variable">$tmp_node</span>._M_right                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$tmp_node</span>                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$tmp_node</span> = <span class="hljs-variable">$tmp_node</span>._M_parent                                        end                                        <span class="hljs-keyword">if</span> <span class="hljs-variable">$node</span>._M_right != <span class="hljs-variable">$tmp_node</span>                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$tmp_node</span>                                        end                                end                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$i</span>++                        end                end                <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 3                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$idx</span> = <span class="hljs-variable">$arg2</span>                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$ElementsFound</span> = 0                        <span class="hljs-keyword">while</span> <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$tree_size</span>                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$value</span> = (void *)(<span class="hljs-variable">$node</span> + 1)                                <span class="hljs-keyword">if</span> *(<span class="hljs-variable">$arg1</span>*)<span class="hljs-variable">$value</span> == <span class="hljs-variable">$idx</span>                                        printf <span class="hljs-string">&quot;elem[%u]: &quot;</span>, <span class="hljs-variable">$i</span>                                        p *(<span class="hljs-variable">$arg1</span>*)<span class="hljs-variable">$value</span>                                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$ElementsFound</span>++                                end                                <span class="hljs-keyword">if</span> <span class="hljs-variable">$node</span>._M_right != 0                                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$node</span>._M_right                                        <span class="hljs-keyword">while</span> <span class="hljs-variable">$node</span>._M_left != 0                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$node</span>._M_left                                        end                                <span class="hljs-keyword">else</span>                                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$tmp_node</span> = <span class="hljs-variable">$node</span>._M_parent                                        <span class="hljs-keyword">while</span> <span class="hljs-variable">$node</span> == <span class="hljs-variable">$tmp_node</span>._M_right                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$tmp_node</span>                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$tmp_node</span> = <span class="hljs-variable">$tmp_node</span>._M_parent                                        end                                        <span class="hljs-keyword">if</span> <span class="hljs-variable">$node</span>._M_right != <span class="hljs-variable">$tmp_node</span>                                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$node</span> = <span class="hljs-variable">$tmp_node</span>                                        end                                end                                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$i</span>++                        end                        printf <span class="hljs-string">&quot;Number of elements found = %u\n&quot;</span>, <span class="hljs-variable">$ElementsFound</span>                end                printf <span class="hljs-string">&quot;Set size = %u\n&quot;</span>, <span class="hljs-variable">$tree_size</span>        endenddocument pset        Prints std:<span class="hljs-keyword">:set</span>&lt;T&gt; <span class="hljs-keyword">or</span> std::multiset&lt;T&gt; information. Works <span class="hljs-keyword">for</span> std::multiset as well.        Syntax: pset &lt;set&gt; &lt;T&gt; &lt;val&gt;: Prints <span class="hljs-builtin-name">set</span> size, <span class="hljs-keyword">if</span> T defined all elements <span class="hljs-keyword">or</span> just element(s) having val        Examples:        pset s - prints <span class="hljs-builtin-name">set</span> size <span class="hljs-keyword">and</span> definition        pset s int - prints all elements <span class="hljs-keyword">and</span> the size of s        pset s int 20 - prints the element(s) with value = 20 (<span class="hljs-keyword">if</span> any) <span class="hljs-keyword">and</span> the size of send<span class="hljs-comment">#</span><span class="hljs-comment"># std::dequeue</span><span class="hljs-comment">#</span>define pdequeue        <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 0                help pdequeue        <span class="hljs-keyword">else</span>                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$size</span> = 0                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$start_cur</span> = <span class="hljs-variable">$arg0</span>._M_impl._M_start._M_cur                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$start_last</span> = <span class="hljs-variable">$arg0</span>._M_impl._M_start._M_last                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$start_stop</span> = <span class="hljs-variable">$start_last</span>                <span class="hljs-keyword">while</span> <span class="hljs-variable">$start_cur</span> != <span class="hljs-variable">$start_stop</span>                        p *<span class="hljs-variable">$start_cur</span>                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$start_cur</span>++                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$size</span>++                end                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$finish_first</span> = <span class="hljs-variable">$arg0</span>._M_impl._M_finish._M_first                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$finish_cur</span> = <span class="hljs-variable">$arg0</span>._M_impl._M_finish._M_cur                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$finish_last</span> = <span class="hljs-variable">$arg0</span>._M_impl._M_finish._M_last                <span class="hljs-keyword">if</span> <span class="hljs-variable">$finish_cur</span> &lt; <span class="hljs-variable">$finish_last</span>                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$finish_stop</span> = <span class="hljs-variable">$finish_cur</span>                <span class="hljs-keyword">else</span>                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$finish_stop</span> = <span class="hljs-variable">$finish_last</span>                end                <span class="hljs-keyword">while</span> <span class="hljs-variable">$finish_first</span> != <span class="hljs-variable">$finish_stop</span>                        p *<span class="hljs-variable">$finish_first</span>                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$finish_first</span>++                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$size</span>++                end                printf <span class="hljs-string">&quot;Dequeue size = %u\n&quot;</span>, <span class="hljs-variable">$size</span>        endenddocument pdequeue        Prints std::dequeue&lt;T&gt; information.        Syntax: pdequeue &lt;dequeue&gt;: Prints dequeue size, <span class="hljs-keyword">if</span> T defined all elements        Deque elements are listed <span class="hljs-string">&quot;left to right&quot;</span> (left-most stands <span class="hljs-keyword">for</span> front <span class="hljs-keyword">and</span> right-most stands <span class="hljs-keyword">for</span> back)        Example:        pdequeue d - prints all elements <span class="hljs-keyword">and</span> size of dend<span class="hljs-comment">#</span><span class="hljs-comment"># std::stack</span><span class="hljs-comment">#</span>define pstack        <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 0                help pstack        <span class="hljs-keyword">else</span>                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$start_cur</span> = <span class="hljs-variable">$arg0</span>.c._M_impl._M_start._M_cur                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$finish_cur</span> = <span class="hljs-variable">$arg0</span>.c._M_impl._M_finish._M_cur                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$size</span> = <span class="hljs-variable">$finish_cur</span> - <span class="hljs-variable">$start_cur</span>        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$i</span> = <span class="hljs-variable">$size</span> - 1        <span class="hljs-keyword">while</span> <span class="hljs-variable">$i</span> &gt;= 0            p *(<span class="hljs-variable">$start_cur</span> + <span class="hljs-variable">$i</span>)            <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$i</span>--        end                printf <span class="hljs-string">&quot;Stack size = %u\n&quot;</span>, <span class="hljs-variable">$size</span>        endenddocument pstack        Prints std::stack&lt;T&gt; information.        Syntax: pstack &lt;stack&gt;: Prints all elements <span class="hljs-keyword">and</span> size of the stack        Stack elements are listed <span class="hljs-string">&quot;top to buttom&quot;</span> (top-most element is the first <span class="hljs-keyword">to</span> come on pop)        Example:        pstack s - prints all elements <span class="hljs-keyword">and</span> the size of send<span class="hljs-comment">#</span><span class="hljs-comment"># std::queue</span><span class="hljs-comment">#</span>define pqueue        <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 0                help pqueue        <span class="hljs-keyword">else</span>                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$start_cur</span> = <span class="hljs-variable">$arg0</span>.c._M_impl._M_start._M_cur                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$finish_cur</span> = <span class="hljs-variable">$arg0</span>.c._M_impl._M_finish._M_cur                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$size</span> = <span class="hljs-variable">$finish_cur</span> - <span class="hljs-variable">$start_cur</span>        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$i</span> = 0        <span class="hljs-keyword">while</span> <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$size</span>            p *(<span class="hljs-variable">$start_cur</span> + <span class="hljs-variable">$i</span>)            <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$i</span>++        end                printf <span class="hljs-string">&quot;Queue size = %u\n&quot;</span>, <span class="hljs-variable">$size</span>        endenddocument pqueue        Prints std::queue&lt;T&gt; information.        Syntax: pqueue &lt;queue&gt;: Prints all elements <span class="hljs-keyword">and</span> the size of the queue       <span class="hljs-built_in"> Queue </span>elements are listed <span class="hljs-string">&quot;top to bottom&quot;</span> (top-most element is the first <span class="hljs-keyword">to</span> come on pop)        Example:        pqueue q - prints all elements <span class="hljs-keyword">and</span> the size of qend<span class="hljs-comment">#</span><span class="hljs-comment"># std::priority_queue</span><span class="hljs-comment">#</span>define ppqueue        <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 0                help ppqueue        <span class="hljs-keyword">else</span>                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$size</span> = <span class="hljs-variable">$arg0</span>.c._M_impl._M_finish - <span class="hljs-variable">$arg0</span>.c._M_impl._M_start                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$capacity</span> = <span class="hljs-variable">$arg0</span>.c._M_impl._M_end_of_storage - <span class="hljs-variable">$arg0</span>.c._M_impl._M_start                <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$i</span> = <span class="hljs-variable">$size</span> - 1                <span class="hljs-keyword">while</span> <span class="hljs-variable">$i</span> &gt;= 0                        p *(<span class="hljs-variable">$arg0</span>.c._M_impl._M_start + <span class="hljs-variable">$i</span>)                        <span class="hljs-builtin-name">set</span> <span class="hljs-variable">$i</span>--                end                printf <span class="hljs-string">&quot;Priority queue size = %u\n&quot;</span>, <span class="hljs-variable">$size</span>                printf <span class="hljs-string">&quot;Priority queue capacity = %u\n&quot;</span>, <span class="hljs-variable">$capacity</span>        endenddocument ppqueue        Prints std::priority_queue&lt;T&gt; information.        Syntax: ppqueue &lt;priority_queue&gt;: Prints all elements, size <span class="hljs-keyword">and</span> capacity of the priority_queue        Priority_queue elements are listed <span class="hljs-string">&quot;top to buttom&quot;</span> (top-most element is the first <span class="hljs-keyword">to</span> come on pop)        Example:        ppqueue pq - prints all elements, size <span class="hljs-keyword">and</span> capacity of pqend<span class="hljs-comment">#</span><span class="hljs-comment"># std::bitset</span><span class="hljs-comment">#</span>define pbitset        <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 0                help pbitset        <span class="hljs-keyword">else</span>        p /t <span class="hljs-variable">$arg0</span>._M_w        endenddocument pbitset        Prints std::bitset&lt;n&gt; information.        Syntax: pbitset &lt;bitset&gt;: Prints all bits <span class="hljs-keyword">in</span> bitset        Example:        pbitset b - prints all bits <span class="hljs-keyword">in</span> bend<span class="hljs-comment">#</span><span class="hljs-comment"># std::string</span><span class="hljs-comment">#</span>define pstring        <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 0                help pstring        <span class="hljs-keyword">else</span>                printf <span class="hljs-string">&quot;String \t\t\t= \&quot;%s\&quot;\n&quot;</span>, <span class="hljs-variable">$arg0</span>._M_data()                printf <span class="hljs-string">&quot;String size/length \t= %u\n&quot;</span>, <span class="hljs-variable">$arg0</span>._M_rep()._M_length                printf <span class="hljs-string">&quot;String capacity \t= %u\n&quot;</span>, <span class="hljs-variable">$arg0</span>._M_rep()._M_capacity                printf <span class="hljs-string">&quot;String ref-count \t= %d\n&quot;</span>, <span class="hljs-variable">$arg0</span>._M_rep()._M_refcount        endenddocument pstring        Prints std::string information.        Syntax: pstring &lt;string&gt;        Example:        pstring s - Prints content, size/length, capacity <span class="hljs-keyword">and</span> ref-count of string send<span class="hljs-comment">#</span><span class="hljs-comment"># std::wstring</span><span class="hljs-comment">#</span>define pwstring        <span class="hljs-keyword">if</span> <span class="hljs-variable">$argc</span> == 0                help pwstring        <span class="hljs-keyword">else</span>                call printf(<span class="hljs-string">&quot;WString \t\t= \&quot;%ls\&quot;\n&quot;</span>, <span class="hljs-variable">$arg0</span>._M_data())                printf <span class="hljs-string">&quot;WString size/length \t= %u\n&quot;</span>, <span class="hljs-variable">$arg0</span>._M_rep()._M_length                printf <span class="hljs-string">&quot;WString capacity \t= %u\n&quot;</span>, <span class="hljs-variable">$arg0</span>._M_rep()._M_capacity                printf <span class="hljs-string">&quot;WString ref-count \t= %d\n&quot;</span>, <span class="hljs-variable">$arg0</span>._M_rep()._M_refcount        endenddocument pwstring        Prints std::wstring information.        Syntax: pwstring &lt;wstring&gt;        Example:        pwstring s - Prints content, size/length, capacity <span class="hljs-keyword">and</span> ref-count of wstring send<span class="hljs-comment">#</span><span class="hljs-comment"># C++ related beautifiers (optional)</span><span class="hljs-comment">#</span>pythonimport sys<span class="hljs-comment">#sys.path.insert(0, &#x27;~/pp/python&#x27;)</span>sys.path.insert(0, <span class="hljs-string">&#x27;/usr/local/gcc4.9.3/share/gcc-4.9.3/python&#x27;</span>)<span class="hljs-keyword">from</span> libstdcxx.v6.printers import register_libstdcxx_printersregister_libstdcxx_printers (None)endprintf <span class="hljs-string">&quot;================  GDB STL Viewer  ================\n&quot;</span>printf <span class="hljs-string">&quot;&gt;       pvector     :    std::vector&lt;T&gt;          &lt;\n&quot;</span>printf <span class="hljs-string">&quot;&gt;       plist       :    std::list&lt;T&gt;            &lt;\n&quot;</span>printf <span class="hljs-string">&quot;&gt;       pmap        :    std::map&lt;T&gt;             &lt;\n&quot;</span>printf <span class="hljs-string">&quot;&gt;       pmap        :    std::multimap&lt;T&gt;        &lt;\n&quot;</span>printf <span class="hljs-string">&quot;&gt;       pset        :    std::set&lt;T&gt;             &lt;\n&quot;</span>printf <span class="hljs-string">&quot;&gt;       pset        :    std::multiset&lt;T&gt;        &lt;\n&quot;</span>printf <span class="hljs-string">&quot;&gt;       pdequeue    :    std::deque&lt;T&gt;           &lt;\n&quot;</span>printf <span class="hljs-string">&quot;&gt;       pqueue      :    std::queue&lt;T&gt;           &lt;\n&quot;</span>printf <span class="hljs-string">&quot;&gt;       pstack      :    std::stack&lt;T&gt;           &lt;\n&quot;</span>printf <span class="hljs-string">&quot;&gt;       ppqueue     :    std::priority_queue&lt;T&gt;  &lt;\n&quot;</span>printf <span class="hljs-string">&quot;&gt;       pbitset     :    std::bitset&lt;T&gt;          &lt;\n&quot;</span>printf <span class="hljs-string">&quot;&gt;       pstring     :    std::string             &lt;\n&quot;</span>printf <span class="hljs-string">&quot;&gt;       pwstring    :    std::widwstring         &lt;\n&quot;</span>printf <span class="hljs-string">&quot;==================================================\n&quot;</span><span class="hljs-builtin-name">set</span> <span class="hljs-builtin-name">print</span> pretty on<span class="hljs-builtin-name">set</span> <span class="hljs-builtin-name">print</span> object on<span class="hljs-builtin-name">set</span> <span class="hljs-builtin-name">print</span> static-members on<span class="hljs-builtin-name">set</span> <span class="hljs-builtin-name">print</span> vtbl on<span class="hljs-builtin-name">set</span> <span class="hljs-builtin-name">print</span> demangle on<span class="hljs-builtin-name">set</span> demangle-style gnu-v3<span class="hljs-builtin-name">set</span> <span class="hljs-builtin-name">print</span> sevenbit-strings off</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><ul><li><a href="https://sourceware.org/gdb/wiki/STLSupport">https://sourceware.org/gdb/wiki/STLSupport</a></li><li><a href="http://www.yolinux.com/TUTORIALS/GDB-Commands.html#STLDEREF">http://www.yolinux.com/TUTORIALS/GDB-Commands.html#STLDEREF</a></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>STL</tag>
      
      <tag>GDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AddressSanitizer —— ASAN分析内存错误</title>
    <link href="/2020/10/10/C++/Tools/ASAN/"/>
    <url>/2020/10/10/C++/Tools/ASAN/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>AddressSanitizer</code> 是一个性能非常好的<code>C/C++</code> 内存错误探测工具。<br>它由编译器的插桩模块和替换了<code>malloc</code>函数的运行时库组成。<br>这个工具可以探测如下这些类型的错误：</p><ul><li>对堆、栈和全局内存的访问越界(堆缓冲区溢出，栈缓冲区溢出，和全局缓冲区溢出)</li><li>UAP(Use-after-free，悬挂指针的解引用，或者说野指针)</li><li>Use-after-return(无效的栈上内存，运行时标记 <code>ASAN_OPTIONS=detect_stack_use_after_return=1</code>)</li><li>Use-After-Scope (作用域外访问，<code>clang</code>标记<code>-fsanitize-address-use-after-scope</code>)</li><li>内存的重复释放 (double-free)</li><li>初始化顺序的BUG</li><li>内存泄漏 (memory leak)</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>以<code>CentOS7</code>环境下编译器<code>gcc 4.8.5</code>为例 (版本支持: <code>gcc version</code> &gt; 4.8)</p><ol><li>安装对应系统版本和<code>gcc</code>版本的<code>libasan</code> (搜索<code>libasan</code>相关包: <a href="https://pkgs.org/search/?q=libasan">pkgs.org</a>):<pre><code class="hljs apache"><span class="hljs-attribute">wget</span> http://mirror.centos.org/centos/<span class="hljs-number">7</span>/os/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/Packages/libasan-<span class="hljs-number">4</span>.<span class="hljs-number">8</span>.<span class="hljs-number">5</span>-<span class="hljs-number">39</span>.el<span class="hljs-number">7</span>.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.rpm<span class="hljs-attribute">yum</span> install -y libasan-<span class="hljs-number">4</span>.<span class="hljs-number">8</span>.<span class="hljs-number">5</span>-<span class="hljs-number">39</span>.el<span class="hljs-number">7</span>.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.rpm</code></pre></li><li>编译源码的时候只需要加上以下编译参数即可：<pre><code class="hljs ini"><span class="hljs-attr">-fsanitize</span>=address -f<span class="hljs-literal">no</span>-omit-frame-pointer -g</code></pre></li><li>若项目是以<code>CMake</code>作为构建工具, 可按如下做法修改:<pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">add_definitions</span><span class="hljs-params">(<span class="hljs-string">&quot;-fsanitize=address -fno-omit-frame-pointer -lasan&quot;</span>)</span></span><span class="hljs-function"><span class="hljs-title">set</span><span class="hljs-params">(CMAKE_CXX_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -fsanitize=address -fno-omit-frame-pointer -lasan&quot;</span>)</span></span><span class="hljs-function"><span class="hljs-title">set</span><span class="hljs-params">(CMAKE_C_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_C_FLAGS&#125; -fsanitize=address -fno-omit-frame-pointer -lasan&quot;</span>)</span></span><span class="hljs-function"><span class="hljs-title">set</span><span class="hljs-params">(CMAKE_EXE_LINKER_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_EXE_LINKER_FLAGS&#125; -fsanitize=address -fno-omit-frame-pointer -lasan&quot;</span>)</span></span><span class="hljs-function"><span class="hljs-title">set</span><span class="hljs-params">(CMAKE_MODULE_LINKER_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_MODULE_LINKER_FLAGS&#125; -fsanitize=address -fno-omit-frame-pointer -lasan&quot;</span>)</span></span></code></pre></li></ol><h2 id="测试例子"><a href="#测试例子" class="headerlink" title="测试例子"></a>测试例子</h2><p>源码:</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>** argv)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> a[<span class="hljs-number">5</span>];    <span class="hljs-keyword">int</span> index=<span class="hljs-number">6</span>;    <span class="hljs-keyword">int</span> retval=a[index];    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Ret :&quot;</span> &lt;&lt; retval &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">return</span> retval;&#125;</code></pre><p>编译：</p><pre><code class="hljs routeros">g++ -g <span class="hljs-attribute">-std</span>=c++11 <span class="hljs-attribute">-fsanitize</span>=address -fno-omit-frame-pointer test.cpp -o test</code></pre><p>运行<code>./test</code>后报错：</p><pre><code class="hljs yaml"><span class="hljs-string">=================================================================</span><span class="hljs-string">==7708==ERROR:</span> <span class="hljs-attr">AddressSanitizer:</span> <span class="hljs-string">stack-buffer-overflow</span> <span class="hljs-string">on</span> <span class="hljs-string">address</span> <span class="hljs-number">0x7ffc32facb68</span> <span class="hljs-string">at</span> <span class="hljs-string">pc</span> <span class="hljs-number">0x401610</span> <span class="hljs-string">bp</span> <span class="hljs-number">0x7ffc32facae0</span> <span class="hljs-string">sp</span> <span class="hljs-number">0x7ffc32facad0</span><span class="hljs-string">READ</span> <span class="hljs-string">of</span> <span class="hljs-string">size</span> <span class="hljs-number">4</span> <span class="hljs-string">at</span> <span class="hljs-number">0x7ffc32facb68</span> <span class="hljs-string">thread</span> <span class="hljs-string">T0</span>    <span class="hljs-comment">#0 0x40160f in main test.cpp:8</span>    <span class="hljs-comment">#1 0x7fefe78a8504 in __libc_start_main (/lib64/libc.so.6+0x22504)</span>    <span class="hljs-comment">#2 0x401448 (./test+0x401448)</span><span class="hljs-string">Address</span> <span class="hljs-number">0x7ffc32facb68</span> <span class="hljs-string">is</span> <span class="hljs-string">located</span> <span class="hljs-string">in</span> <span class="hljs-string">stack</span> <span class="hljs-string">of</span> <span class="hljs-string">thread</span> <span class="hljs-string">T0</span> <span class="hljs-string">at</span> <span class="hljs-string">offset</span> <span class="hljs-number">56</span> <span class="hljs-string">in</span> <span class="hljs-string">frame</span>    <span class="hljs-comment">#0 0x401525 in main ./test.cpp:5</span>  <span class="hljs-string">This</span> <span class="hljs-string">frame</span> <span class="hljs-string">has</span> <span class="hljs-number">2</span> <span class="hljs-string">object(s):</span>    [<span class="hljs-number">32</span>, <span class="hljs-number">52</span><span class="hljs-string">)</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-string">&lt;==</span> <span class="hljs-string">Memory</span> <span class="hljs-string">access</span> <span class="hljs-string">at</span> <span class="hljs-string">offset</span> <span class="hljs-number">56</span> <span class="hljs-string">overflows</span> <span class="hljs-string">this</span> <span class="hljs-string">variable</span>    [<span class="hljs-number">96</span>, <span class="hljs-number">144</span><span class="hljs-string">)</span> <span class="hljs-string">&#x27;m&#x27;</span><span class="hljs-attr">HINT:</span> <span class="hljs-string">this</span> <span class="hljs-string">may</span> <span class="hljs-string">be</span> <span class="hljs-string">a</span> <span class="hljs-literal">false</span> <span class="hljs-string">positive</span> <span class="hljs-string">if</span> <span class="hljs-string">your</span> <span class="hljs-string">program</span> <span class="hljs-string">uses</span> <span class="hljs-string">some</span> <span class="hljs-string">custom</span> <span class="hljs-string">stack</span> <span class="hljs-string">unwind</span> <span class="hljs-string">mechanism</span> <span class="hljs-string">or</span> <span class="hljs-string">swapcontext</span>      <span class="hljs-string">(longjmp</span> <span class="hljs-string">and</span> <span class="hljs-string">C++</span> <span class="hljs-string">exceptions</span> <span class="hljs-string">*are*</span> <span class="hljs-string">supported)</span><span class="hljs-attr">SUMMARY: AddressSanitizer:</span> <span class="hljs-string">stack-buffer-overflow</span> <span class="hljs-string">./test.cpp:8</span> <span class="hljs-string">main</span><span class="hljs-attr">Shadow bytes around the buggy address:</span>  <span class="hljs-attr">0x1000065ed910:</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-attr">0x1000065ed920:</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-attr">0x1000065ed930:</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-attr">0x1000065ed940:</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-attr">0x1000065ed950:</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><span class="hljs-string">=&gt;0x1000065ed960:</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-string">f1</span> <span class="hljs-string">f1</span> <span class="hljs-string">f1</span> <span class="hljs-string">f1</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">04</span>[<span class="hljs-string">f4</span>]<span class="hljs-string">f2</span> <span class="hljs-string">f2</span>  <span class="hljs-attr">0x1000065ed970:</span> <span class="hljs-string">f2</span> <span class="hljs-string">f2</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-string">f4</span> <span class="hljs-string">f4</span> <span class="hljs-string">f3</span> <span class="hljs-string">f3</span> <span class="hljs-string">f3</span> <span class="hljs-string">f3</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-attr">0x1000065ed980:</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-attr">0x1000065ed990:</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-attr">0x1000065ed9a0:</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-attr">0x1000065ed9b0:</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><span class="hljs-string">Shadow</span> <span class="hljs-string">byte</span> <span class="hljs-string">legend</span> <span class="hljs-string">(one</span> <span class="hljs-string">shadow</span> <span class="hljs-string">byte</span> <span class="hljs-string">represents</span> <span class="hljs-number">8</span> <span class="hljs-string">application</span> <span class="hljs-string">bytes):</span>  <span class="hljs-attr">Addressable:</span>           <span class="hljs-number">00</span>  <span class="hljs-attr">Partially addressable:</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span>  <span class="hljs-attr">Heap left redzone:</span>       <span class="hljs-string">fa</span>  <span class="hljs-attr">Heap right redzone:</span>      <span class="hljs-string">fb</span>  <span class="hljs-attr">Freed heap region:</span>       <span class="hljs-string">fd</span>  <span class="hljs-attr">Stack left redzone:</span>      <span class="hljs-string">f1</span>  <span class="hljs-attr">Stack mid redzone:</span>       <span class="hljs-string">f2</span>  <span class="hljs-attr">Stack right redzone:</span>     <span class="hljs-string">f3</span>  <span class="hljs-attr">Stack partial redzone:</span>   <span class="hljs-string">f4</span>  <span class="hljs-attr">Stack after return:</span>      <span class="hljs-string">f5</span>  <span class="hljs-attr">Stack use after scope:</span>   <span class="hljs-string">f8</span>  <span class="hljs-attr">Global redzone:</span>          <span class="hljs-string">f9</span>  <span class="hljs-attr">Global init order:</span>       <span class="hljs-string">f6</span>  <span class="hljs-attr">Poisoned by user:</span>        <span class="hljs-string">f7</span>  <span class="hljs-string">Contiguous</span> <span class="hljs-string">container</span> <span class="hljs-string">OOB:fc</span>  <span class="hljs-attr">ASan internal:</span>           <span class="hljs-string">fe</span><span class="hljs-string">==7708==ABORTING</span></code></pre><p>可以看到报错提示<strong>栈缓冲区溢出</strong> <code>ERROR: AddressSanitizer: stack-buffer-overflow</code>, 通过调查源码可以发现程序对栈区内存上的数组<code>a</code>的访问越界了。</p><h2 id="实践经验"><a href="#实践经验" class="headerlink" title="实践经验"></a>实践经验</h2><ul><li>项目的构建方案应当有编译选项可以随时启用/关闭<code>ASAN</code></li><li>项目送测阶段可以打开<code>ASAN</code>以帮助暴露更多的低概率诡异问题</li><li>请勿在生产版本中启用<code>ASAN</code>, 其会降低程序运行速度大概2-5倍 (特殊情况除外)</li><li>实际开发测试过程中通过<code>ASAN</code>扫出的常见问题有:<ul><li>多线程下临界资源未加保护导致同时出现读写访问, 解决方案一般是对该资源恰当地加锁即可</li><li>内存越界, 如申请了N字节的内存却向其内存地址拷贝大于N字节的数据, 这种情况在没有开启ASAN的情况下一般都很难发现</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>ASAN</tag>
      
      <tag>内存越界</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
